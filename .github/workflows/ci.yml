name: CI Model Retraining & Deployment

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write

jobs:
  retrain-and-deploy:
    runs-on: ubuntu-latest
    env:
      MLFLOW_TRACKING_URI: "https://dagshub.com/tianiayu/Workflow-CI.mlflow"
      MLFLOW_TRACKING_USERNAME: "tianiayu"
      MLFLOW_TRACKING_PASSWORD: ${{ secrets.DAGSHUB_TOKEN }}
      DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12.7"

    - name: Install Dependencies
      run: |
        pip install -r MLProject/requirements.txt
        pip install dagshub mlflow jq docker

    - name: Run MLflow Project
      working-directory: MLProject
      run: python modelling.py

    - name: Get Best MLflow Run ID
      id: get_run_id
      working-directory: MLProject
      run: |
        python - <<EOF
        import os
        from mlflow.tracking import MlflowClient

        tracking_uri = os.getenv("MLFLOW_TRACKING_URI")
        client = MlflowClient(tracking_uri=tracking_uri)

        experiment = client.get_experiment_by_name("HousePricePrediction")
        if experiment is None:
          print("::error::Experiment not found")
          exit(1)

        runs = client.search_runs(
          experiment_ids=[experiment.experiment_id],
          order_by=["metrics.mae ASC"],
          max_results=1
        )

        if runs:
          best_run_id = runs[0].info.run_id
          print(f"Best Run ID: {best_run_id}")
          print(f"::set-output name=run_id::{best_run_id}")
        else:
          print("::error::No runs found.")
          exit(1)
        EOF

    - name: Verify Model URI
      working-directory: MLProject
      run: |
        echo "Verifying local model..."

        python - <<EOF
        import joblib
        import pandas as pd
        import numpy as np
        import os

        # Path lengkap ke model
        model_path = "model.joblib"

        if not os.path.exists(model_path):
          raise FileNotFoundError(f"{model_path} not found!")

        model = joblib.load("model.joblib")

        dummy_input = pd.DataFrame([np.zeros(model.n_features_in_)])
        prediction = model.predict(dummy_input)

        print(" Model loaded locally and prediction succeeded:", prediction)
        EOF

    - name: Build Docker Image
      run: |
        docker build -t ciciayu/houseprice-model:latest .

    - name: Login to Docker Hub
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Push Docker Image
      run: |
        docker push ciciayu/houseprice-model:latest

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: trained-model
        path: MLProject/model.joblib
